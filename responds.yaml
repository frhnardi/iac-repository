Parameters:
#################
### Parameter ###
#################
  VPCName:
    Type: String
    Default: "respond-vpc"
  VpcCidr:
    Type: String
    Default: "10.0.0.0/16"
  PublicSubnet1Name:
    Type: String
    Default: "Public Subnet 1"
  PublicSubnet1Cidr:
    Type: String
    Default: "10.0.1.0/24"
  PublicSubnet2Name:
    Type: String
    Default: "Public Subnet 2"
  PublicSubnet2Cidr:
    Type: String
    Default: "10.0.2.0/24"
  PublicSubnet3Name:
    Type: String
    Default: "Public Subnet 3"
  PublicSubnet3Cidr:
    Type: String
    Default: "10.0.3.0/24"
  PrivateSubnet1Name:
    Type: String
    Default: "Private Subnet 1"
  PrivateSubnet1Cidr:
    Type: String
    Default: "10.0.4.0/24"
  PrivateSubnet2Name:
    Type: String
    Default: "Private Subnet 2"
  PrivateSubnet2Cidr:
    Type: String
    Default: "10.0.5.0/24"
  RDSSubnetName:
    Type: String
    Default: "RDS Subnet"
  RDSSubnetCidr:
    Type: String
    Default: "10.0.6.0/24"
  InstanceAMI:
    Type: AWS::EC2::Image::Id
    Default: "ami-01855c90f88c94d7c" # <----- Using UBUNTU 20.04
  InstanceType:
    Type: String
    Default: "t3.micro"
  InstanceKeyName:
    Type: AWS::EC2::KeyPair::KeyName
  WebServerSecurityGroupDescription:
    Type: String
    Default: "Enable HTTP and SSH access to web servers"
  DBSecurityGroupDescription:
    Type: String
    Default: "Allow access from the WebServerSecurityGroup"
  DBInstanceIdentifier:
    Type: String
    Default: "Respond-RDS-Instance"
  DBAllocatedStorage:
    Type: Number
    Default: 20
  DBInstanceClass:
    Type: String
    Default: "db.t3.micro"
  DBName:
    Type: String
    Default: "responddb"
  DBUser:
    Type: String
    Default: "admin"
  DBPassword:
    Type: String
    Default: "respondstrongpassword"
    NoEcho: true
  LoadBalancerName:
    Type: String
    Default: "respond-load-balancer"
  ACMCertificateARN:
    Type: String
    Default: "arn:aws:acm:<region>:<aws-account-id>:certificate/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
  DNSName:
    Type: String
    Default: "example.com"
  HostedZoneName:
    Type: String
    Default: "example.com."
  HostedZoneId:
    Type: String
    Description: The ID of the hosted zone for the DNS record
  Route53ZoneName:
    Type: String
    Description: The name of the Route 53 hosted zone for the DNS record
  RecordSetName:
    Type: String
    Default: "www"
  MinInstances:
    Type: Number
    Default: 2
  MaxInstances:
    Type: Number
    Default: 5
  TargetCPUUtilization:
    Type: Number
    Default: 50
  AutoScalingCooldown:
    Type: Number
    Default: 300
  S3BucketName:
    Type: String
    Default: "respond-bucket"
Resources:
#################
###### VPC ######
#################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VPCName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref PublicSubnet1Name
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref PublicSubnet2Name
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet3Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref PublicSubnet3Name
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref PrivateSubnet1Name
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref PrivateSubnet2Name
  RDSSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref RDSSubnetCidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref RDSSubnetName
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "Private Route Table 1"
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "Private Route Table 2"
  RDSSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "Private Route Table RDS"
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "Public Route Table"
  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PublicRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3
  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
  RDSSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RDSSubnetRouteTable
      SubnetId: !Ref RDSSubnet
########################
### EC2SecurityGroup ###
########################
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref WebServerSecurityGroupDescription
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: "Web Server Security Group"
########################
### ALBSecurityGroup ###
########################
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable HTTP and HTTPS access to the load balancer"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: "Load Balancer Security Group"
########################
### RDSSecurityGroup ###
########################
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref DBSecurityGroupDescription
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: "DB SG"
###########################
### LaunchConfiguration ###
###########################
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref InstanceAMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref InstanceKeyName
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install nginx -y
          chkconfig nginx on
          service nginx start
          echo "Welcome to nginx!" > /usr/share/nginx/html/index.html
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 10
            VolumeType: gp2
      Metadata:
        AWS::CloudFormation::Init:
          config:
            packages:
              yum:
                git: []
              apt:
                git: []
            services:
              sysvinit:
                nginx:
                  enabled: true
                  ensureRunning: true
########################
### AutoScalingGroup ###
########################
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs ""
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Ref MinInstances
      MaxSize: !Ref MaxInstances
      Cooldown: !Ref AutoScalingCooldown
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      TargetGroupARNs:
        - !Ref TargetGroup
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - GroupDesiredCapacity
            - GroupInServiceInstances
            - GroupPendingInstances
            - GroupStandbyInstances
            - GroupTerminatingInstances
            - GroupTotalInstances
      Tags:
        - Key: Name
          Value: "Web Server"
          PropagateAtLaunch: true
######################
### ALBTargetGroup ###
######################
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "WebServerTargetGroup"
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckPath: /index.html
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
####################
### LoadBalancer ###
####################
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref LoadBalancerName
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
#####################
### HTTP Listener ###
#####################
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
######################
### HTTPS Listener ###
######################
  LoadBalancerListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref ACMCertificateARN
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
##########################
### CloudWatchLogGroup ###
##########################
  # CloudWatchLogsGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     LogGroupName: !Ref CloudWatchLogGroupName
  #     RetentionInDays: !Ref CloudWatchLogRetentionInDays
#######################
### CloudWatchAlarm ###
#######################
  CloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref SNSNotificationTopic # <--- Using SNS
      AlarmDescription: "Alarm when CPU exceeds 70%"
      AlarmName: "WebServerHighCPU"
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 70
      Unit: Percent
#################
### S3 Bucket ###
#################
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
        - Action: "s3:GetObject"
          Effect: "Allow"
          Principal: "*"
          Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref EC2Role
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "EC2Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:ListBucket"
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}"
                  - !Sub "arn:aws:s3:::${S3Bucket}/*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "cloudwatch:PutMetricData"
                Resource: "*"
#################
### SNS Topic ###
#################
  SNSNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "HighCPUAlarm"
      TopicName: "HighCPUAlarm"
###############################
### DNS Management Route 53 ###
###############################
  Route53Zone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref Route53ZoneName
      HostedZoneConfig:
        Comment: "Route53 Hosted Zone for Web Application"
#################
### DNS Record ###
#################
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !Ref HostedZoneId
      Name: !Ref DNSName
      HostedZoneId: !Ref Route53Zone
      Type: A
#################
###   Output  ###
#################
Outputs:
  VpcId:
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPC"
  PublicSubnet1:
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1"
  PublicSubnet2:
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2"
  PublicSubnet3:
    Value: !Ref PublicSubnet3
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet3"
  PrivateSubnet1:
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1"
  PrivateSubnet2:
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2"
  RDSSubnet:
    Value: !Ref RDSSubnet
    Export:
      Name: !Sub "${AWS::StackName}-RDSSubnet"
  LoadBalancerDNSName:
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-LoadBalancerDNSName"
  S3BucketName:
    Value: !Ref S3BucketName
    Export:
      Name: !Sub "${AWS::StackName}-S3BucketName"
  EC2Role:
    Value: !Ref EC2Role
    Export:
      Name: !Sub "${AWS::StackName}-EC2Role"
  SNSNotificationTopic:
    Value: !Ref SNSNotificationTopic
    Export:
      Name: !Sub "${AWS::StackName}-SNSNotificationTopic"
  DNSName:
    Value: !Ref DNSName
    Export:
      Name: !Sub "${AWS::StackName}-DNSName"